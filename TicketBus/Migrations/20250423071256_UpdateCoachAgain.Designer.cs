// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TicketBus.Data;

#nullable disable

namespace TicketBus.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250423071256_UpdateCoachAgain")]
    partial class UpdateCoachAgain
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TicketBus.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("TicketBus.Models.Bill", b =>
                {
                    b.Property<int>("IdBill")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdBill"));

                    b.Property<string>("BillCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IdPassenger")
                        .HasColumnType("int");

                    b.Property<int?>("SeatQuantity")
                        .HasColumnType("int");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("IdBill");

                    b.HasIndex("IdPassenger");

                    b.ToTable("Bills");
                });

            modelBuilder.Entity("TicketBus.Models.Brand", b =>
                {
                    b.Property<int>("IdBrand")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdBrand"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BrandCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameBrand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RegistFormId")
                        .HasColumnType("int");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("IdBrand");

                    b.HasIndex("RegistFormId");

                    b.HasIndex("UserId");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("TicketBus.Models.BusRoute", b =>
                {
                    b.Property<int>("IdRoute")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdRoute"));

                    b.Property<int?>("Distance")
                        .HasColumnType("int");

                    b.Property<int?>("IdRegist")
                        .HasColumnType("int");

                    b.Property<string>("NameRoute")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RouteCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.HasKey("IdRoute");

                    b.HasIndex("IdRegist");

                    b.ToTable("BusRoutes");
                });

            modelBuilder.Entity("TicketBus.Models.City", b =>
                {
                    b.Property<int>("IdCity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCity"));

                    b.Property<string>("CityCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameCity")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdCity");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("TicketBus.Models.Coach", b =>
                {
                    b.Property<int>("IdCoach")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCoach"));

                    b.Property<string>("CoachCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Documents")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IdBrand")
                        .HasColumnType("int");

                    b.Property<int?>("IdType")
                        .HasColumnType("int");

                    b.Property<string>("Images")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumberPlate")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.HasKey("IdCoach");

                    b.HasIndex("IdBrand");

                    b.HasIndex("IdType");

                    b.ToTable("Coaches");
                });

            modelBuilder.Entity("TicketBus.Models.Coupon", b =>
                {
                    b.Property<int>("IdCoupon")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCoupon"));

                    b.Property<string>("CouponCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Percentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.HasKey("IdCoupon");

                    b.ToTable("Coupons");
                });

            modelBuilder.Entity("TicketBus.Models.DiscountDetails", b =>
                {
                    b.Property<int>("IdCoupon")
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    b.Property<int>("IdBill")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.HasKey("IdCoupon", "IdBill");

                    b.HasIndex("IdBill");

                    b.ToTable("DiscountDetails");
                });

            modelBuilder.Entity("TicketBus.Models.District", b =>
                {
                    b.Property<int>("IdDistrict")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdDistrict"));

                    b.Property<string>("DistrictCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IdCity")
                        .HasColumnType("int");

                    b.Property<string>("NameDistrict")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdDistrict");

                    b.HasIndex("IdCity");

                    b.ToTable("Districts");
                });

            modelBuilder.Entity("TicketBus.Models.DropOff", b =>
                {
                    b.Property<int>("IdDropOff")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdDropOff"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DropOffCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DropOffName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IdCity")
                        .HasColumnType("int");

                    b.Property<int?>("IdRegist")
                        .HasColumnType("int");

                    b.HasKey("IdDropOff");

                    b.HasIndex("IdCity");

                    b.HasIndex("IdRegist");

                    b.ToTable("DropOffs");
                });

            modelBuilder.Entity("TicketBus.Models.Employee", b =>
                {
                    b.Property<int>("IdEmployee")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdEmployee"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmployeeCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IdBrand")
                        .HasColumnType("int");

                    b.Property<string>("IdCard")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IdPos")
                        .HasColumnType("int");

                    b.Property<string>("NameEmployee")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.HasKey("IdEmployee");

                    b.HasIndex("IdBrand");

                    b.HasIndex("IdPos");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("TicketBus.Models.Feedback", b =>
                {
                    b.Property<int>("IdFeedback")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdFeedback"));

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FeedbackCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IdPassenger")
                        .HasColumnType("int");

                    b.Property<int?>("Rating")
                        .HasColumnType("int");

                    b.HasKey("IdFeedback");

                    b.HasIndex("IdPassenger");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("TicketBus.Models.News", b =>
                {
                    b.Property<int>("IdNews")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdNews"));

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("IdTypeNews")
                        .HasColumnType("int");

                    b.Property<string>("NewsCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdNews");

                    b.HasIndex("IdTypeNews");

                    b.ToTable("News");
                });

            modelBuilder.Entity("TicketBus.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("TicketBus.Models.Passenger", b =>
                {
                    b.Property<int>("IdPassenger")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPassenger"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdCard")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NamePassenger")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PassengerCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdPassenger");

                    b.ToTable("Passengers");
                });

            modelBuilder.Entity("TicketBus.Models.Pickup", b =>
                {
                    b.Property<int>("IdPickup")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPickup"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IdCity")
                        .HasColumnType("int");

                    b.Property<int?>("IdRegist")
                        .HasColumnType("int");

                    b.Property<string>("PickupCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PickupName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdPickup");

                    b.HasIndex("IdCity");

                    b.HasIndex("IdRegist");

                    b.ToTable("Pickups");
                });

            modelBuilder.Entity("TicketBus.Models.Position", b =>
                {
                    b.Property<int>("IdPos")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPos"));

                    b.Property<decimal>("BaseSalary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Bonus")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("NamePos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PosCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.HasKey("IdPos");

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("TicketBus.Models.Price", b =>
                {
                    b.Property<int>("IdPrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPrice"));

                    b.Property<int?>("IdCoach")
                        .HasColumnType("int");

                    b.Property<int?>("IdRoute")
                        .HasColumnType("int");

                    b.Property<int?>("IdStopEnd")
                        .HasColumnType("int");

                    b.Property<int?>("IdStopStart")
                        .HasColumnType("int");

                    b.Property<string>("PriceCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PriceValue")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("IdPrice");

                    b.HasIndex("IdCoach");

                    b.HasIndex("IdRoute");

                    b.HasIndex("IdStopEnd");

                    b.HasIndex("IdStopStart");

                    b.ToTable("Prices");
                });

            modelBuilder.Entity("TicketBus.Models.RegistForm", b =>
                {
                    b.Property<int>("IdRegist")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdRegist"));

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("IdBrand")
                        .HasColumnType("int");

                    b.Property<string>("RegistCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RejectReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.HasKey("IdRegist");

                    b.HasIndex("IdBrand");

                    b.ToTable("RegistForms");
                });

            modelBuilder.Entity("TicketBus.Models.RouteStop", b =>
                {
                    b.Property<int>("IdStop")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdStop"));

                    b.Property<int?>("IdRoute")
                        .HasColumnType("int");

                    b.Property<string>("StopCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StopName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StopOrder")
                        .HasColumnType("int");

                    b.Property<TimeSpan?>("Time")
                        .HasColumnType("time");

                    b.HasKey("IdStop");

                    b.HasIndex("IdRoute");

                    b.ToTable("RouteStops");
                });

            modelBuilder.Entity("TicketBus.Models.ScheduleDetails", b =>
                {
                    b.Property<int>("IdCoach")
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    b.Property<int>("IdRoute")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<TimeSpan?>("ArriveTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("DepartTime")
                        .HasColumnType("time");

                    b.HasKey("IdCoach", "IdRoute");

                    b.HasIndex("IdRoute");

                    b.ToTable("ScheduleDetails");
                });

            modelBuilder.Entity("TicketBus.Models.Seat", b =>
                {
                    b.Property<int>("IdSeat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdSeat"));

                    b.Property<int?>("IdCoach")
                        .HasColumnType("int");

                    b.Property<string>("SeatCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SeatNumber")
                        .HasColumnType("int");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.HasKey("IdSeat");

                    b.HasIndex("IdCoach");

                    b.ToTable("Seats");
                });

            modelBuilder.Entity("TicketBus.Models.Service", b =>
                {
                    b.Property<int>("IdService")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdService"));

                    b.Property<string>("NameService")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdService");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("TicketBus.Models.ServiceDetails", b =>
                {
                    b.Property<int>("IdType")
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    b.Property<int>("IdService")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.HasKey("IdType", "IdService");

                    b.HasIndex("IdService");

                    b.ToTable("ServiceDetails");
                });

            modelBuilder.Entity("TicketBus.Models.Ticket", b =>
                {
                    b.Property<int>("IdTicket")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTicket"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("IdEmployee")
                        .HasColumnType("int");

                    b.Property<int?>("IdPassenger")
                        .HasColumnType("int");

                    b.Property<int?>("IdPrice")
                        .HasColumnType("int");

                    b.Property<int?>("IdSeat")
                        .HasColumnType("int");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<string>("TicketCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdTicket");

                    b.HasIndex("IdEmployee");

                    b.HasIndex("IdPassenger");

                    b.HasIndex("IdPrice");

                    b.HasIndex("IdSeat");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("TicketBus.Models.TypeNews", b =>
                {
                    b.Property<int>("IdTypeNews")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTypeNews"));

                    b.Property<string>("NameTypeNews")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdTypeNews");

                    b.ToTable("TypeNews");
                });

            modelBuilder.Entity("TicketBus.Models.VehicleType", b =>
                {
                    b.Property<int>("IdType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdType"));

                    b.Property<string>("NameType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SeatCount")
                        .HasColumnType("int");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<string>("TypeCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdType");

                    b.ToTable("VehicleTypes");

                    b.HasData(
                        new
                        {
                            IdType = 1,
                            NameType = "Giường nằm CLC 34 chỗ",
                            SeatCount = 34,
                            State = 0,
                            TypeCode = "VT001"
                        },
                        new
                        {
                            IdType = 2,
                            NameType = "Giường nằm CLC 40 chỗ",
                            SeatCount = 40,
                            State = 0,
                            TypeCode = "VT002"
                        },
                        new
                        {
                            IdType = 3,
                            NameType = "Giường nằm CLC VIP 20 chỗ",
                            SeatCount = 20,
                            State = 0,
                            TypeCode = "VT003"
                        },
                        new
                        {
                            IdType = 4,
                            NameType = "Giường nằm massage 34 chỗ",
                            SeatCount = 34,
                            State = 0,
                            TypeCode = "VT004"
                        },
                        new
                        {
                            IdType = 5,
                            NameType = "Giường nằm massage 40 chỗ",
                            SeatCount = 40,
                            State = 0,
                            TypeCode = "VT005"
                        },
                        new
                        {
                            IdType = 6,
                            NameType = "Giường nằm đôi VIP 22 chỗ",
                            SeatCount = 22,
                            State = 0,
                            TypeCode = "VT006"
                        },
                        new
                        {
                            IdType = 7,
                            NameType = "Ghé Nằm CLC 34 chỗ",
                            SeatCount = 34,
                            State = 0,
                            TypeCode = "VT007"
                        },
                        new
                        {
                            IdType = 8,
                            NameType = "Ghé Nằm CLC 40 chỗ",
                            SeatCount = 40,
                            State = 0,
                            TypeCode = "VT008"
                        },
                        new
                        {
                            IdType = 9,
                            NameType = "Ghé Nằm VIP 20 chỗ",
                            SeatCount = 20,
                            State = 0,
                            TypeCode = "VT009"
                        },
                        new
                        {
                            IdType = 10,
                            NameType = "Ghé Nằm massage 34 chỗ",
                            SeatCount = 34,
                            State = 0,
                            TypeCode = "VT010"
                        },
                        new
                        {
                            IdType = 11,
                            NameType = "Ghế ngồi CLC 45 chỗ",
                            SeatCount = 45,
                            State = 0,
                            TypeCode = "VT011"
                        },
                        new
                        {
                            IdType = 12,
                            NameType = "Ghế ngồi CLC 50 chỗ",
                            SeatCount = 50,
                            State = 0,
                            TypeCode = "VT012"
                        },
                        new
                        {
                            IdType = 13,
                            NameType = "Ghế ngồi VIP 32 chỗ",
                            SeatCount = 32,
                            State = 0,
                            TypeCode = "VT013"
                        },
                        new
                        {
                            IdType = 14,
                            NameType = "Ghế ngồi Limousine 28 chỗ",
                            SeatCount = 28,
                            State = 0,
                            TypeCode = "VT014"
                        },
                        new
                        {
                            IdType = 15,
                            NameType = "Limousine DCar VIP 9 chỗ",
                            SeatCount = 9,
                            State = 0,
                            TypeCode = "VT015"
                        },
                        new
                        {
                            IdType = 16,
                            NameType = "Limousine President 11 chỗ",
                            SeatCount = 11,
                            State = 0,
                            TypeCode = "VT016"
                        },
                        new
                        {
                            IdType = 17,
                            NameType = "Limousine Fuso Rosa 17 chỗ",
                            SeatCount = 17,
                            State = 0,
                            TypeCode = "VT017"
                        },
                        new
                        {
                            IdType = 18,
                            NameType = "Limousine Skybus 19 chỗ",
                            SeatCount = 19,
                            State = 0,
                            TypeCode = "VT018"
                        },
                        new
                        {
                            IdType = 19,
                            NameType = "Limousine Jet VIP 22 chỗ",
                            SeatCount = 22,
                            State = 0,
                            TypeCode = "VT019"
                        },
                        new
                        {
                            IdType = 20,
                            NameType = "Limousine Auto Kingdom 26 chỗ",
                            SeatCount = 26,
                            State = 0,
                            TypeCode = "VT020"
                        },
                        new
                        {
                            IdType = 21,
                            NameType = "Xe khách giường nằm 34 chỗ",
                            SeatCount = 34,
                            State = 0,
                            TypeCode = "VT021"
                        },
                        new
                        {
                            IdType = 22,
                            NameType = "Xe khách giường nằm 40 chỗ",
                            SeatCount = 40,
                            State = 0,
                            TypeCode = "VT022"
                        },
                        new
                        {
                            IdType = 23,
                            NameType = "Xe khách giường đôi 20 chỗ",
                            SeatCount = 20,
                            State = 0,
                            TypeCode = "VT023"
                        },
                        new
                        {
                            IdType = 24,
                            NameType = "Xe khách giường đôi 34 chỗ",
                            SeatCount = 34,
                            State = 0,
                            TypeCode = "VT024"
                        },
                        new
                        {
                            IdType = 25,
                            NameType = "Xe ghế ngồi 12 chỗ Transit",
                            SeatCount = 12,
                            State = 0,
                            TypeCode = "VT025"
                        },
                        new
                        {
                            IdType = 26,
                            NameType = "Xe ghế ngồi 29 chỗ County",
                            SeatCount = 29,
                            State = 0,
                            TypeCode = "VT026"
                        },
                        new
                        {
                            IdType = 27,
                            NameType = "Xe ghế ngồi 34 chỗ Thaco Garden",
                            SeatCount = 34,
                            State = 1,
                            TypeCode = "VT027"
                        },
                        new
                        {
                            IdType = 28,
                            NameType = "Xe ghế ngồi 50 chỗ Giáp Bát Express",
                            SeatCount = 50,
                            State = 1,
                            TypeCode = "VT028"
                        },
                        new
                        {
                            IdType = 29,
                            NameType = "Xe giường nằm massage 38 chỗ",
                            SeatCount = 38,
                            State = 0,
                            TypeCode = "VT029"
                        },
                        new
                        {
                            IdType = 30,
                            NameType = "Xe giường nằm CLC 32 chỗ",
                            SeatCount = 32,
                            State = 0,
                            TypeCode = "VT030"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("TicketBus.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("TicketBus.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TicketBus.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("TicketBus.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TicketBus.Models.Bill", b =>
                {
                    b.HasOne("TicketBus.Models.Passenger", "Passenger")
                        .WithMany()
                        .HasForeignKey("IdPassenger")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Passenger");
                });

            modelBuilder.Entity("TicketBus.Models.Brand", b =>
                {
                    b.HasOne("TicketBus.Models.RegistForm", "RegistForm")
                        .WithMany()
                        .HasForeignKey("RegistFormId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TicketBus.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ApplicationUser");

                    b.Navigation("RegistForm");
                });

            modelBuilder.Entity("TicketBus.Models.BusRoute", b =>
                {
                    b.HasOne("TicketBus.Models.RegistForm", "RegistForm")
                        .WithMany()
                        .HasForeignKey("IdRegist")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("RegistForm");
                });

            modelBuilder.Entity("TicketBus.Models.Coach", b =>
                {
                    b.HasOne("TicketBus.Models.Brand", "Brand")
                        .WithMany("Coaches")
                        .HasForeignKey("IdBrand")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TicketBus.Models.VehicleType", "VehicleType")
                        .WithMany("Coaches")
                        .HasForeignKey("IdType")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Brand");

                    b.Navigation("VehicleType");
                });

            modelBuilder.Entity("TicketBus.Models.DiscountDetails", b =>
                {
                    b.HasOne("TicketBus.Models.Bill", "Bill")
                        .WithMany()
                        .HasForeignKey("IdBill")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TicketBus.Models.Coupon", "Coupon")
                        .WithMany()
                        .HasForeignKey("IdCoupon")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Bill");

                    b.Navigation("Coupon");
                });

            modelBuilder.Entity("TicketBus.Models.District", b =>
                {
                    b.HasOne("TicketBus.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("IdCity")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("City");
                });

            modelBuilder.Entity("TicketBus.Models.DropOff", b =>
                {
                    b.HasOne("TicketBus.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("IdCity")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TicketBus.Models.RegistForm", "RegistForm")
                        .WithMany()
                        .HasForeignKey("IdRegist")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("City");

                    b.Navigation("RegistForm");
                });

            modelBuilder.Entity("TicketBus.Models.Employee", b =>
                {
                    b.HasOne("TicketBus.Models.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("IdBrand")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TicketBus.Models.Position", "Position")
                        .WithMany()
                        .HasForeignKey("IdPos")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Brand");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("TicketBus.Models.Feedback", b =>
                {
                    b.HasOne("TicketBus.Models.Passenger", "Passenger")
                        .WithMany()
                        .HasForeignKey("IdPassenger")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Passenger");
                });

            modelBuilder.Entity("TicketBus.Models.News", b =>
                {
                    b.HasOne("TicketBus.Models.TypeNews", "TypeNews")
                        .WithMany()
                        .HasForeignKey("IdTypeNews")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("TypeNews");
                });

            modelBuilder.Entity("TicketBus.Models.Notification", b =>
                {
                    b.HasOne("TicketBus.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TicketBus.Models.Pickup", b =>
                {
                    b.HasOne("TicketBus.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("IdCity")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TicketBus.Models.RegistForm", "RegistForm")
                        .WithMany()
                        .HasForeignKey("IdRegist")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("City");

                    b.Navigation("RegistForm");
                });

            modelBuilder.Entity("TicketBus.Models.Price", b =>
                {
                    b.HasOne("TicketBus.Models.Coach", "Coach")
                        .WithMany()
                        .HasForeignKey("IdCoach")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TicketBus.Models.BusRoute", "BusRoute")
                        .WithMany()
                        .HasForeignKey("IdRoute")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TicketBus.Models.RouteStop", "RouteStopEnd")
                        .WithMany()
                        .HasForeignKey("IdStopEnd")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TicketBus.Models.RouteStop", "RouteStopStart")
                        .WithMany()
                        .HasForeignKey("IdStopStart")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("BusRoute");

                    b.Navigation("Coach");

                    b.Navigation("RouteStopEnd");

                    b.Navigation("RouteStopStart");
                });

            modelBuilder.Entity("TicketBus.Models.RegistForm", b =>
                {
                    b.HasOne("TicketBus.Models.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("IdBrand")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Brand");
                });

            modelBuilder.Entity("TicketBus.Models.RouteStop", b =>
                {
                    b.HasOne("TicketBus.Models.BusRoute", "BusRoute")
                        .WithMany()
                        .HasForeignKey("IdRoute")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("BusRoute");
                });

            modelBuilder.Entity("TicketBus.Models.ScheduleDetails", b =>
                {
                    b.HasOne("TicketBus.Models.Coach", "Coach")
                        .WithMany()
                        .HasForeignKey("IdCoach")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TicketBus.Models.BusRoute", "BusRoute")
                        .WithMany()
                        .HasForeignKey("IdRoute")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BusRoute");

                    b.Navigation("Coach");
                });

            modelBuilder.Entity("TicketBus.Models.Seat", b =>
                {
                    b.HasOne("TicketBus.Models.Coach", "Coach")
                        .WithMany()
                        .HasForeignKey("IdCoach")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Coach");
                });

            modelBuilder.Entity("TicketBus.Models.ServiceDetails", b =>
                {
                    b.HasOne("TicketBus.Models.Service", "Service")
                        .WithMany()
                        .HasForeignKey("IdService")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TicketBus.Models.VehicleType", "VehicleType")
                        .WithMany()
                        .HasForeignKey("IdType")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Service");

                    b.Navigation("VehicleType");
                });

            modelBuilder.Entity("TicketBus.Models.Ticket", b =>
                {
                    b.HasOne("TicketBus.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("IdEmployee")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TicketBus.Models.Passenger", "Passenger")
                        .WithMany()
                        .HasForeignKey("IdPassenger")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TicketBus.Models.Price", "Price")
                        .WithMany()
                        .HasForeignKey("IdPrice")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TicketBus.Models.Seat", "Seat")
                        .WithMany()
                        .HasForeignKey("IdSeat")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Employee");

                    b.Navigation("Passenger");

                    b.Navigation("Price");

                    b.Navigation("Seat");
                });

            modelBuilder.Entity("TicketBus.Models.Brand", b =>
                {
                    b.Navigation("Coaches");
                });

            modelBuilder.Entity("TicketBus.Models.VehicleType", b =>
                {
                    b.Navigation("Coaches");
                });
#pragma warning restore 612, 618
        }
    }
}
